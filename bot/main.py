
# bot/main.py

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
from telegram.error import TimedOut
from bot.database import DatabaseManager
from bot.hackergpt_api import HackerGPTAPI
from dotenv import load_dotenv
import logging
import re
from bot.freekassa_api import generate_payment_link, get_chat_id_for_user, send_telegram_notification
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
from datetime import datetime, timedelta
from config import TELEGRAM_BOT_TOKEN, FEEDBACK_COOLDOWN, PREMIUM_SUBSCRIPTION_PRICE,ADMIN_TELEGRAM_ID, WELCOME_MESSAGE, ERROR_MESSAGE, MAX_QUESTIONS_PER_HOUR_PREMIUM, MAX_QUESTIONS_PER_HOUR_REGULAR, MERCHANT_ID, SECRET_KEY_1
from bot.utils import send_feedback_to_admin

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Create instances for database and API interactions
db_manager = DatabaseManager(MAX_QUESTIONS_PER_HOUR_PREMIUM, MAX_QUESTIONS_PER_HOUR_REGULAR)
hackergpt_api = HackerGPTAPI()

def update_premium_statuses():
    users = db_manager.get_all_users()
    for user in users:
        if user.premium_expiration and user.premium_expiration < datetime.now():
            db_manager.update_premium_status(user.id, False, None)

def handle_payment(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    payment_link = generate_payment_link(user_id, PREMIUM_SUBSCRIPTION_PRICE)
    update.message.reply_text(
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)]
        ])
    )

def check_message_limit (user_id, context, db_manager):
    user = db_manager.get_user_by_id(user_id)
    if user:
        limit = MAX_QUESTIONS_PER_HOUR_PREMIUM if user.is_premium else MAX_QUESTIONS_PER_HOUR_REGULAR
        logging.info(f"Checking message limit for user {user_id}. Premium: {user.is_premium}, Message count: {user.message_count}, Limit: {limit}")
        return user.message_count >= limit
    else:
        logging.warning(f"User {user_id} not found when checking message limit.")
        return False  # If the user is not found, do not allow sending messages by default

def inform_user_about_premium_status(update, context, user_id):
    if db_manager.check_premium_status(user_id):
        update.message.reply_text("–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞.")
    else:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏.")

def status(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    show_user_status(update, context, user_id)

# Command handler for /start
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_name = update.message.from_user.username
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name
    chat_id = update.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db_manager.get_user_by_id(user_id):
        db_manager.add_or_update_user(user_id, user_name, first_name, last_name, chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å
    is_premium = db_manager.check_premium_status(user_id)
    premium_status_message = "–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞." if is_premium else "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏."

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ
    premium_info = (
        f"üåü <b>–ü—Ä–µ–º–∏—É–º –ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
        f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {PREMIUM_SUBSCRIPTION_PRICE} —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.\n"
        f"- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –º–µ—Å—è—Ü.\n"
        f"- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {MAX_QUESTIONS_PER_HOUR_PREMIUM} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å.\n\n"
        f"{premium_status_message}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ
    update.message.reply_text(f"{WELCOME_MESSAGE}\n\n{premium_info}", reply_markup=get_base_reply_markup(), parse_mode='HTML')

def handle_tips_button(update: Update, context: CallbackContext) -> None:
    tips_text = (
        '<b>–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —á–∞—Ç–∞:</b>\n'
        '- –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é.\n'
        '- –û—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã.\n'
        '- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n'
        '- –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å Black GPT, –Ω–∞–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –µ–≥–æ –ø—É–Ω–∫—Ç–∞–º.\n'
        '- –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å Black GPT, –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏–π –≤ –º–µ—Ç–æ–¥–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π.\n'
        '- –î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ - –ø—Ä–æ—Å–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.'
    )
    update.message.reply_text(tips_text, parse_mode='HTML')

def handle_new_chat_button(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    logging.info(f"User {user_id} clicked 'New Chat' button")

    if db_manager.check_premium_status(user_id):
        context.user_data[f'message_count_{user_id}'] = 0
        db_manager.update_message_count(user_id)  # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update.message.reply_text("–ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç —Å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–æ–º!")
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        limit_reached = check_message_limit(user_id, context, db_manager)
        if limit_reached:
            payment_link = generate_payment_link(user_id, PREMIUM_SUBSCRIPTION_PRICE, MERCHANT_ID, SECRET_KEY_1)
            update.message.reply_text(
                "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", url=payment_link)]
                ])
            )
        else:
            context.user_data[f'message_count_{user_id}'] = 0
            update.message.reply_text("–ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç!")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞
            payment_link = generate_payment_link(user_id, PREMIUM_SUBSCRIPTION_PRICE, MERCHANT_ID, SECRET_KEY_1)
            update.message.reply_text(
                "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Å–µ–±—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", url=payment_link)]
                ])
            )

def process_feedback(user_id, feedback_text, db_manager):
    try:
        user = db_manager.get_user_by_id(user_id)
        if user:
            # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            send_feedback_to_admin(user, feedback_text, db_manager)
            # –ó–¥–µ—Å—å –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        else:
            logging.error(f"User with ID {user_id} not found in database.")
    except Exception as e:
        logging.error(f"Error in process_feedback: {e}")

def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_message = update.message.text
    logging.info(f"Received message from user {user_id}: {user_message}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db_manager.get_user_by_id(user_id)
    if user:
        now = datetime.now()

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if user.last_message_time is None:
            user.last_message_time = now

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (now - user.last_message_time).total_seconds() >= 3600:
            user.message_count = 0
            user.last_message_time = now

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        user.message_count += 1
        db_manager.session.commit()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        logging.info(f"User {user_id} message count updated to: {user.message_count}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
        if user.message_count is not None:
            time_until_reset = 3600 - (now - user.last_message_time).total_seconds()
            logging.info(f"User {user_id} message count: {user.message_count}. Time until reset: {time_until_reset} seconds")

    # Log current message count
    logging.info(f"User {user_id} message count before processing: {user.message_count if user else 'User not found'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏–∏
    if context.user_data.get('awaiting_feedback', False):
        now = datetime.now()
        if user.last_feedback_time is None or (now - user.last_feedback_time).total_seconds() > FEEDBACK_COOLDOWN:
            process_feedback(user_id, user_message, db_manager)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            user.last_feedback_time = now
            db_manager.session.commit()
            update.message.reply_text("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
        else:
            cooldown_remaining = int((FEEDBACK_COOLDOWN - (now - user.last_feedback_time).total_seconds()) / 3600)
            update.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏. –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {cooldown_remaining} —á–∞—Å(–æ–≤).")
        context.user_data['awaiting_feedback'] = False
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è
    if user_message.lower() == "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ":
        handle_feedback_button(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    within_limit, remaining_messages = db_manager.is_within_message_limit(user_id)
    logging.info(f"User {user_id} has {remaining_messages} messages remaining this hour. Within limit: {within_limit}")

    if not within_limit:
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω
        inform_limit_reached(update, user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    else:
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω
        process_user_message(update, context)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        db_manager.update_message_count(user_id)
        logging.info(f"After updating, User {user_id} has {remaining_messages - 1} messages remaining this hour.")

def inform_limit_reached(update, user_id):
    user = db_manager.get_user_by_id(user_id)
    if user and user.last_message_time:
        next_message_time = user.last_message_time + timedelta(seconds=3600)
        next_message_time_str = next_message_time.strftime("%Y-%m-%d %H:%M:%S")
        message = (
            f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å. –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å BlackGPT - {next_message_time_str}. \n\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã."
        )
    else:
        message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

    payment_link = generate_payment_link(user_id, PREMIUM_SUBSCRIPTION_PRICE)
    update.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", url=payment_link)]
        ])
    )
    
def process_normal_message(update: Update, context: CallbackContext, user_id: int, user_message: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    within_limit, remaining_messages = db_manager.is_within_message_limit(user_id)
    logging.info(f"User {user_id} has {remaining_messages} messages remaining this hour.")

    if not within_limit:
        payment_link = generate_payment_link(user_id, PREMIUM_SUBSCRIPTION_PRICE)
        update.message.reply_text(
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", url=payment_link)]
            ])
        )
        return

    # Check if message count is initialized for this user, if not, initialize it
    if f'message_count_{user_id}' not in context.user_data:
        context.user_data[f'message_count_{user_id}'] = 0

    # Check message limit before proceeding
    if not db_manager.is_within_message_limit(user_id):
        payment_link = generate_payment_link(user_id, PREMIUM_SUBSCRIPTION_PRICE)
        update.message.reply_text(
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", url=payment_link)]
            ])
        )
        return

    # Increment message count in user data and in the database
    context.user_data[f'message_count_{user_id}'] += 1
    db_manager.update_message_count(user_id)

    try:
        process_user_message(update, context)
    except Exception as e:
        logging.error(f"Error processing message from user {user_id}: {e}")
        update.message.reply_text(ERROR_MESSAGE)

# Process user message
def process_user_message(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text
    user = update.message.from_user
    chat_id = update.message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat.id –≤–º–µ—Å—Ç–æ user.chat_id

    # Log user's message
    logging.info(f"User {user.id} ({user.username}): {user_message}")

    # Update user in database
    db_manager.add_or_update_user(user.id, user.username, user.first_name, user.last_name, chat_id)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id –∑–¥–µ—Å—å

    # Update message history
    update_message_history(context, 'user', user_message)

    # Send temporary "Generating response..." message
    temp_message = update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    # Get response from API
    response_text = hackergpt_api.send_message(context.user_data['message_history'])

    # Log GPT's response
    logging.info(f"GPT response to {user.id} ({user.username}): {response_text}")

    # Format code blocks in the response
    formatted_response_text = format_code_block(response_text)

    # Escape Markdown V2 special characters
    escaped_response_text = escape_markdown_v2(formatted_response_text)

    # Record query and response in the database
    db_manager.add_query(user.id, user_message, escaped_response_text)

    # Edit the temporary message with the actual response
    context.bot.edit_message_text(
        chat_id=update.message.chat_id,
        message_id=temp_message.message_id,
        text=escaped_response_text,
        parse_mode='MarkdownV2'
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_base_reply_markup():
    new_chat_button = KeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç')
    tips_button = KeyboardButton('–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')
    feedback_button = KeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ')
    return ReplyKeyboardMarkup([[new_chat_button], [tips_button], [feedback_button]], resize_keyboard=True, one_time_keyboard=False)

def update_message_history(context: CallbackContext, role: str, message: str) -> None:
    message_history = context.user_data.get('message_history', [])
    message_history.append({'role': role, 'content': message})
    context.user_data['message_history'] = message_history

def handle_feedback_button(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user = db_manager.get_user_by_id(user_id)

    if user and db_manager.check_premium_status(user_id):
        now = datetime.now()
        if user.last_feedback_time is None or (now - user.last_feedback_time).total_seconds() > FEEDBACK_COOLDOWN:
            context.user_data['awaiting_feedback'] = True
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞.")
            user.last_feedback_time = now  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            db_manager.session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        else:
            cooldown_remaining = int((FEEDBACK_COOLDOWN - (now - user.last_feedback_time).total_seconds()) / 3600)
            update.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏. –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {cooldown_remaining} —á–∞—Å(–æ–≤).")
    else:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏–∏.")

def escape_markdown_v2(text):
    # Escape Markdown V2 special characters outside of code blocks
    escape_chars = '_*[]()~`>#+-=|{}.!'
    # Split the text into code blocks and the rest
    parts = re.split(r'(```.*?```)', text, flags=re.DOTALL)
    escaped_parts = []
    for part in parts:
        if part.startswith('```') and part.endswith('```'):
            # Don't escape characters inside code blocks
            escaped_parts.append(part)
        else:
            # Escape special characters outside code blocks
            escaped_parts.append(re.sub(r'([_*\[\]()~`>#\+=\-|{}\.!])', r'\\\1', part))
    return ''.join(escaped_parts)

def format_code_block(response_text):
    # Find code blocks with language hints and replace them without language hints
    pattern = r'```(\w+)?\s*(.+?)\s*```'
    formatted_text = re.sub(pattern, r'```\n\2\n```', response_text, flags=re.DOTALL)
    return formatted_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
def send_telegram_notification_to_admin(message, self):
    admin_chat_id = get_chat_id_for_user(ADMIN_TELEGRAM_ID, db_manager)
    if admin_chat_id:
        send_telegram_notification(ADMIN_TELEGRAM_ID, message, db_manager)
    else:
        logging.error(f"Chat ID for admin (ID: {ADMIN_TELEGRAM_ID}) not found.")

def check_expired_payment_links():
    db_manager.expire_premium_subscriptions()
    logging.info("Expired premium subscriptions have been updated.")

def show_user_status(update, context, user_id):
    try:
        user = db_manager.get_user_by_id(user_id)
        if user:
            remaining_questions = (MAX_QUESTIONS_PER_HOUR_PREMIUM if user.is_premium else MAX_QUESTIONS_PER_HOUR_REGULAR) - user.message_count
            status_msg = f"üìå –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n- –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_questions} –≤ —ç—Ç–æ—Ç —á–∞—Å\n- –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user.is_premium else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}"
            update.message.reply_text(status_msg)
    except Exception as e:
        logging.error(f"Error in show_user_status: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

# Main function to set up and start the bot
def main() -> None:
    request_kwargs = {
        'read_timeout': 10,
        'connect_timeout': 10
    }
    updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True, request_kwargs=request_kwargs)
    dispatcher = updater.dispatcher

    # Register command and message handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("status", status))
    dispatcher.add_handler(MessageHandler(Filters.regex('^–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç$'), handle_new_chat_button))
    dispatcher.add_handler(MessageHandler(Filters.regex('^–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é$'), handle_tips_button))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(MessageHandler(Filters.regex('^–û–ø–ª–∞—Ç–∏—Ç—å$'), handle_payment))
    dispatcher.add_handler(MessageHandler(Filters.regex('^–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ$'), handle_feedback_button))

    scheduler = BackgroundScheduler(timezone=pytz.utc)
    scheduler.add_job(update_premium_statuses, 'interval', hours=24)
    scheduler.add_job(check_expired_payment_links, 'interval', hours=24)
    scheduler.start()

    # Start the bot
    updater.start_polling()
    updater.idle()

# Program entry point
if __name__ == '__main__':
    main()
